FROM docker.io/library/ubuntu:20.04 AS builder
ARG crux_cmake_args="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/app"

###
# Install certs
###

RUN apt-get update \
      && apt-get -y install \
      ca-certificates \
      && rm -rf /var/lib/apt/lists/*

###
# Build the binary. These intermediate layers will be discarded.
###

LABEL description="Build layers - crux-toolkit"

# Required system packages
RUN apt-get update
RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:kitware/ppa
RUN apt-get update
RUN apt-get install -y cmake
  
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  build-essential \
  curl \
  git \
  subversion \
  wget \
  libcurl4-openssl-dev \
  libssl-dev \
  uuid-dev \
  zlib1g-dev \
  libpulse-dev \
  unzip \
  tzdata \
  && rm -rf /var/lib/apt/lists/*

  
RUN mkdir /app  

WORKDIR /src

RUN git config --global user.email "you@example.com" && \
    git config --global user.name "Your Name"

COPY . /src/crux-toolkit

# Next build crux
###

WORKDIR /src/crux-toolkit

RUN cmake ${crux_cmake_args} .

RUN make && make install

# Gather binary and dynamic dependencies to copy over to base layer
###

LABEL description="crux-toolkit"

FROM docker.io/library/ubuntu:24.04 AS runtime

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  libcurl4-openssl-dev \
  libssl-dev \
  uuid-runtime \
  zlib1g \
  libpulse0 \
  tzdata \
  && rm -rf /var/lib/apt/lists/*

RUN mkdir /app
# RUN mkdir /home/crux && \
#    groupadd -r crux && useradd --no-log-init -r -g crux crux && \
#    chown crux:crux /home/crux
  
COPY --from=builder /app/bin/crux /app/bin/crux

ENV PATH="${PATH}:/app/bin"
# WORKDIR /home/crux
