# Crux parameter file (generated by Crux version 4.1-f3b7423b-2024-03-15)
# Full documentation available at http://cruxtoolkit.sourceforge.net/
# comet_version 2016.01 rev. 1
# Everything following the '#' symbol is treated as a comment.

# Specifies the maximum charge state feature.  When set to zero, use the maximum
# observed charge state.
# Available for make-pin and percolator.
max-charge-feature=0

# Path where pin file will be written instead of make-pin.pin.
# It is optional for make-pin
output-file=

# Specify the verbosity of the current processes. Each level prints the
# following messages, including all those at lower verbosity levels: 0-fatal
# errors, 10-non-fatal errors, 20-warnings, 30-information on the progress of
# execution, 40-more progress information, 50-debug info, 60-detailed debug
# info.
# Available for all crux programs.
verbosity=30

# A file containing parameters. 
# Available for all crux programs. Any options specified on the command line
# will override values in the parameter file.
parameter-file=

# Replace existing files if true or fail when trying to overwrite a file if
# false.
# Available for all crux programs.  Applies to parameter file as well as index,
# search, and analysis output files.
overwrite=true

# The minimum length of peptides to consider.
# Used from the command line or parameter file by crux-generate-peptides, and
# crux tide-index.
min-length=6

# The maximum length of peptides to consider.
# Available from command line or parameter file for crux-generate-peptides, crux
# tide-index. 
max-length=50

# The minimum mass (in Da) of peptides to consider.
# Available from command line or parameter file for crux-generate-peptides and
# crux tide-index. 
min-mass=200

# The maximum mass (in Da) of peptides to consider.
# Available from command line or parameter file for crux-generate-peptides and
# crux tide-index. 
max-mass=7200

# The minimum number of peaks a spectrum must have for it to be searched.
# Available for tide-search.
min-peaks=20

# Specify the enzyme used to digest the proteins in silico. Available enzymes
# (with the corresponding digestion rules indicated in parentheses) include
# no-enzyme ([X]|[X]), trypsin ([RK]|{P}), trypsin/p ([RK]|[]), chymotrypsin
# ([FWYL]|{P}), elastase ([ALIV]|{P}), clostripain ([R]|[]), cyanogen-bromide
# ([M]|[]), iodosobenzoate ([W]|[]), proline-endopeptidase ([P]|[]),
# staph-protease ([E]|[]), asp-n ([]|[D]), lys-c ([K]|{P}), lys-n ([]|[K]),
# arg-c ([R]|{P}), glu-c ([DE]|{P}), pepsin-a ([FL]|{P}),
# elastase-trypsin-chymotrypsin ([ALIVKRWFY]|{P}), lysarginase ([]|[KR]).
# Specifying --enzyme no-enzyme yields a non-enzymatic digest. Warning: the
# resulting index may be quite large.
# Available for crux-generate-peptides and crux tide-index.
enzyme=trypsin

# Specify rules for in silico digestion of protein sequences. Overrides the
# enzyme option. Two lists of residues are given enclosed in square brackets or
# curly braces and separated by a |. The first list contains residues
# required/prohibited before the cleavage site and the second list is residues
# after the cleavage site. If the residues are required for digestion, they are
# in square brackets, '[' and ']'. If the residues prevent digestion, then they
# are enclosed in curly braces, '{' and '}'. Use X to indicate all residues. For
# example, trypsin cuts after R or K but not before P which is represented as
# [RK]|{P}. AspN cuts after any residue but only before D which is represented
# as [X]|[D]. To prevent the sequences from being digested at all, use {X}|{X}.
# 
custom-enzyme=

# Perform a simple deisotoping operation across each MS2 spectrum. For each peak
# in an MS2 spectrum, consider lower m/z peaks. If the current peak occurs where
# an expected peak would lie for any charge state less than the charge state of
# the precursor, within mass tolerance, and if the current peak is of lower
# abundance, then the peak is removed.  The value of this parameter is the mass
# tolerance, in units of parts-per-million.  If set to 0, no deisotoping is
# performed.
# Available for tide-search.
deisotope=0

# Specify whether every peptide in the database must have two enzymatic termini
# (full-digest) or if peptides with only one enzymatic terminus are also
# included (partial-digest).
# Available for crux-generate-peptides and crux tide-index.
digestion=full-digest

# Maximum number of missed cleavages per peptide to allow in enzymatic
# digestion.
# Available from command line or parameter file for crux-generate-peptides. When
# used with enzyme=<trypsin|elastase|chymotrypsin> includes peptides containing
# one or more potential cleavage sites.
missed-cleavages=0

# Tolerance used for matching peptides to spectra. Peptides must be within +/-
# 'precursor-window' of the spectrum value. The precursor window units depend
# upon precursor-window-type.
# Available for tide-search and crux-generate-peptides.
precursor-window=3

# Specify the units for the window that is used to select peptides around the
# precursor mass location (mass, mz, ppm). The magnitude of the window is
# defined by the precursor-window option, and candidate peptides must fall
# within this window. For the mass window-type, the spectrum precursor m+h value
# is converted to mass, and the window is defined as that mass +/-
# precursor-window. If the m+h value is not available, then the mass is
# calculated from the precursor m/z and provided charge. The peptide mass is
# computed as the sum of the monoisotopic amino acid masses plus 18 Da for the
# terminal OH group. The mz window-type calculates the window as spectrum
# precursor m/z +/- precursor-window and then converts the resulting m/z range
# to the peptide mass range using the precursor charge. For the
# parts-per-million (ppm) window-type, the spectrum mass is calculated as in the
# mass type. The lower bound of the mass window is then defined as the spectrum
# mass / (1.0 + (precursor-window / 1000000)) and the upper bound is defined as
# spectrum mass / (1.0 - (precursor-window / 1000000)).
# Available for tide-search.
precursor-window-type=mass

# Automatically estimate optimal value for the precursor-window parameter from
# the spectra themselves. false=no estimation, warn=try to estimate but use the
# default value in case of failure, fail=try to estimate and quit in case of
# failure.
# Available for tide-search.
auto-precursor-window=false

# Specify the parser to use for reading in MS/MS spectra.
# Available for tide-search.
spectrum-parser=pwiz

# Specify whether, when parsing an MS2 spectrum file, Crux obtains the precursor
# mass information from the "S" line or the "Z" line. 
# Available when spectrum-parser = pwiz.
use-z-line=true

# When creating decoy peptides using decoy-format=shuffle or
# decoy-format=peptide-reverse, this option specifies whether the N-terminal and
# C-terminal amino acids are kept in place or allowed to be shuffled or
# reversed. For a target peptide "EAMPK" with decoy-format=peptide-reverse,
# setting keep-terminal-aminos to "NC" will yield "EPMAK"; setting it to "C"
# will yield "PMAEK"; setting it to "N" will yield "EKPMA"; and setting it to
# "none" will yield "KPMAE".
# Available for tide-index.
keep-terminal-aminos=NC

# Create in the output directory a text file listing of all the peptides in the
# database, along with their corresponding decoy peptides, neutral masses and
# proteins, one per line.
# Available for tide-index.
peptide-list=false

# Stop after the specified pre-processing step.
# Available for print-processed-spectra.
stop-after=xcorr

# Specify the output units for processed spectra.
# Available for print-processed-spectra
output-units=bin

# Outputs an SQT results file to the output directory. Note that if sqt-output
# is enabled, then compute-sp is automatically enabled and cannot be overridden.
# Available for tide-search.
sqt-output=false

# Output an mzIdentML results file to the output directory.
# Available for tide-search.
mzid-output=false

# Output a Percolator input (PIN) file to the output directory.
# Available for tide-search.
pin-output=false

# Output a Percolator pout.xml format results file to the output directory.
# Available for percolator.
pout-output=false

# Output a pepXML results file to the output directory.
# Available for tide-search.
pepxml-output=false

# Output a tab-delimited results file to the output directory.
# Available for tide-search, percolator.
txt-output=true

# Compute the preliminary score Sp for all candidate peptides. Report this score
# in the output, along with the corresponding rank, the number of matched ions
# and the total number of ions. This option is recommended if results are to be
# analyzed by Percolator.If sqt-output is enabled, then compute-sp is
# automatically enabled and cannot be overridden. Note that the Sp computation
# requires re-processing each observed spectrum, so turning on this switch
# involves significant computational overhead.
# Available for tide-search.
compute-sp=false

# A single scan number or a range of numbers to be searched. Range should be
# specified as 'first-last' which will include scans 'first' and 'last'.
# The search range x-y is inclusive of x and y.
scan-number=

# Before calculation of the XCorr score, the m/z axes of the observed and
# theoretical spectra are discretized. This parameter specifies the size of each
# bin. The exact formula for computing the discretized m/z value is
# floor((x/mz-bin-width) + 1.0 - mz-bin-offset), where x is the observed m/z
# value. For low resolution ion trap ms/ms data 1.0005079 and for high
# resolution ms/ms 0.02 is recommended.
# Available for tide-search.
mz-bin-width=1.0005079

# In the discretization of the m/z axes of the observed and theoretical spectra,
# this parameter specifies the location of the left edge of the first bin,
# relative to mass = 0 (i.e., mz-bin-offset = 0.xx means the left edge of the
# first bin will be located at +0.xx Da).
# Available for tide-search.
mz-bin-offset=0.4

# Automatically estimate optimal value for the mz-bin-width parameter from the
# spectra themselves. false=no estimation, warn=try to estimate but use the
# default value in case of failure, fail=try to estimate and quit in case of
# failure.
# Available for tide-search.
auto-mz-bin-width=false

# Automatically infer modifications from the spectra themselves.
# Available for tide-index.
auto-modifications=false

# Specify the spectra file to be used for modification inference when the
# auto-modifications option is enabled. Multiple files may be separated by
# commas.
# Available for tide-index.
auto-modifications-spectra=

# Include flanking peaks around singly charged b and y theoretical ions. Each
# flanking peak occurs in the adjacent m/z bin and has half the intensity of the
# primary peak.
# Available for the tide-search command.
use-flanking-peaks=false

# The lowest spectrum m/z to search in the ms2 file.
# Available for tide-search.
spectrum-min-mz=0

# The highest spectrum m/z to search in the ms2 file.
# Available for tide-search.
spectrum-max-mz=1e+09

# The spectrum charges to search. With 'all' every spectrum will be searched and
# spectra with multiple charge states will be searched once at each charge
# state. With 1, 2, or 3 only spectra with that charge state will be searched.
# Used by tide-search.
spectrum-charge=all

# The fileroot string will be added as a prefix to all output file names.
# Available for all commands that produce an output directory.
fileroot=

# The name of the directory where output files will be created.
# Available for most commands.
output-dir=crux-output

# The name of the directory where temporary files will be created. If this
# parameter is blank, then the system temporary directory will be used
# Available for tide-index.
temp-dir=

# The maximum amount of memory (i.e., RAM), in GB, to be used by tide-index.
# Available for tide-index.
memory-limit=4

# The number of decoys to generate per target. When set to a value n, then with
# concat=F tide-search will output one target and n decoys. The resulting files
# can be used to run the "average target-decoy competition" method in
# assign-confidence. This parameter only applies when decoy-format=shuffle and
# should always be used in combination with allow-dups=T.
# Available for tide-index.
num-decoys-per-target=1

# Specify the number of matches to report for each spectrum.
# Available for tide-search and percolator
top-match=5

# Specify the maximum rank to allow when parsing results files. Matches with
# ranks higher than this value will be ignored (a value of zero allows matches
# with any rank).
# 
top-match-in=0

# When given a unsigned integer value seeds the random number generator with
# that value. When given the string "time" seeds the random number generator
# with the system time.
# Available for all Crux commands.
seed=7

# Specify which isotopes to use in calculating fragment ion mass.
# Used by crux-predict-peptide-ions.
fragment-mass=mono

# Specify the type of isotopic masses to use when calculating the peptide mass.
# Used from command line or parameter file by crux-generate-peptides.
isotopic-mass=mono

# The minimum number of modifications that can be applied to a single peptide.
# Available for tide-index.
min-mods=0

# The maximum number of modifications that can be applied to a single peptide.
# Available for tide-index.
max-mods=255

# The maximum number of modified amino acids that can appear in one peptide.
# Each aa can be modified multiple times.
# 
max-aas-modified=255

# Specify how sequence modifications are reported in various output files. Each
# modification is reported as a number enclosed in square braces following the
# modified residue; however, the number may correspond to one of three different
# masses: (1) 'mod-only' reports the value of the mass shift induced by the
# modification; (2) 'total' reports the mass of the residue with the
# modification (residue mass plus modification mass); (3) 'separate' is the same
# as 'mod-only', but multiple modifications to a single amino acid are reported
# as a comma-separated list of values. For example, suppose amino acid D has an
# unmodified mass of 115 as well as two moifications of masses +14 and +2. In
# this case, the amino acid would be reported as D[16] with 'mod-only', D[131]
# with 'total', and D[14,2] with 'separate'.
# Available for generate-peptides.
mod-mass-format=mod-only

# Set the precision for modifications as written to .txt files.
# Also changes mods written to parameter file. By default, this value is set
# equal to the maximum modification precision in the specification of
# modifications.  Available for tide-index, tide-search and generate-peptides.
mod-precision=4

# Set the precision for scores written to sqt and text files.
# Available for all commands.
precision=8

# Set the precision for masses and m/z written to sqt and text files.
# Available for all commands.
mass-precision=4

# Show search progress by printing every n spectra searched. Set to 0 to show no
# search progress.
# Available for tide-search
print-search-progress=1000

# Specify the type of target-decoy search. Using 'auto', percolator attempts to
# detect the search type automatically.  Using 'separate' specifies two
# searches: one against target and one against decoy protein db. Using
# 'concatenated' specifies a single search on concatenated target-decoy protein
# db.
# Available for percolator
search-input=auto

# When given a unsigned integer value seeds the random number generator with
# that value. When given the string "time" seeds the random number generator
# with the system time.
# Available for all percolator
percolator-seed=1

# Determines the character to separate the protein IDs in the tab-delimited
# output format 
# Available for all percolator
protein-name-separator=,

# Output the computed features in tab-delimited Percolator input (.pin) format.
# The features will be normalized, using either unit norm or standard deviation
# normalization (depending upon the value of the unit-norm option).
# Available for percolator.
feature-file-out=false

# Include decoys (PSMs, peptides, and/or proteins) in the XML output.
# Available for percolator
decoy-xml-output=false

# Specifies the prefix of the protein names that indicate a decoy.
# Available for tide-index and percolator
decoy-prefix=decoy_

# Do not stop execution when encountering questionable SVM inputs or results.
# "percolator.weights.txt".
# Available for percolator
no-terminate=false

# Output final weights to a file named "percolator.weights.txt".
# Available for percolator
output-weights=false

# Read the unnormalized initial weights from the third line of the given file.
# This can be the output of the --output-weights option from a previous
# Percolator analysis. Note that the weights must be in the same order as
# features in the PSM input file(s)
# Available for percolator
init-weights=

# Use the provided initial weights as a static model. If used, the
# --init-weights option must be specified.
# Available for percolator
static=false

# Only train Percolator on a subset of PSMs, and use the resulting score vector
# to evaluate the other PSMs. Recommended when analyzing huge numbers (>1
# million) of PSMs. When set to 0, all PSMs are used for training as normal.
# Available for percolator
subset-max-train=0

# Penalty for mistakes made on positive examples. If this value is set to 0,
# then it is set via cross validation over the values {0.1, 1, 10}, selecting
# the value that yields the largest number of PSMs identified at the q-value
# threshold set via the --test-fdr parameter.
# Available for percolator
c-pos=0

# Penalty for mistake made on negative examples. If not specified, then this
# value is set by cross validation over {0.1, 1, 10}.
# Available for percolator
c-neg=0

# False discovery rate threshold to define positive examples in training.
# Available for percolator
train-fdr=0.01

# False discovery rate threshold used in selecting hyperparameters during
# internal cross-validation and for reporting the final results.
# Available for percolator.
test-fdr=0.01

# Apply the specified threshold to PSM, peptide and protein probabilities to
# obtain a faster estimate of the alpha, beta and gamma parameters.
# Available for percolator.
fido-fast-gridsearch=0

# Do not approximate the posterior distribution by allowing large graph
# components to be split into subgraphs. The splitting is done by duplicating
# peptides with low probabilities. Splitting continues until the number of
# possible configurations of each subgraph is below 2^18
# Available for percolator
fido-no-split-large-components=false

# To speed up inference, proteins for which none of the associated peptides has
# a probability exceeding the specified threshold will be assigned probability =
# 0.
# Available for percolator
fido-protein-truncation-threshold=0.01

# Use target-decoy competition to assign q-values and PEPs. When set to F, the
# mix-max method, which estimates the proportion pi0 of incorrect target PSMs,
# is used instead.
# Available for percolator
tdc=true

# Maximum number of iterations for training.
# Available for percolator
maxiter=10

# Quicker execution by reduced internal cross-validation.
# Available for percolator
quick-validation=false

# In its initial round of training, Percolator uses one feature to induce a
# ranking of PSMs. By default, Percolator will select the feature that produces
# the largest set of target PSMs at a specified FDR threshold (cf. --train-fdr).
# This option allows the user to specify which feature is used for the initial
# ranking, using the name as a string. The name can be preceded by a hyphen
# (e.g. "-XCorr") to indicate that a lower value is better.
# Available for percolator
default-direction=

# Use unit normalization (i.e., linearly rescale each PSM's feature vector to
# have a Euclidean length of 1), instead of standard deviation normalization.
# Available for percolator.
unitnorm=false

# Measure performance on test set each iteration.
# Available for percolator.
test-each-iteration=false

# Use the picked protein-level FDR to infer protein probabilities, provide the
# fasta file as the argument to this flag.
# Available for percolator
picked-protein=

# Type of enzyme
# Available for percolator
protein-enzyme=trypsin

# By default, if the peptides associated with protein A are a proper subset of
# the peptides associated with protein B, then protein A is eliminated and all
# the peptides are considered as evidence for protein B. Note that this
# filtering is done based on the complete set of peptides in the database, not
# based on the identified peptides in the search results. Alternatively, if this
# option is set and if all of the identified peptides associated with protein B
# are also associated with protein A, then Percolator will report a
# comma-separated list of protein IDs, where the full-length protein B is first
# in the list and the fragment protein A is listed second. Not available for
# Fido.
# Available for percolator
protein-report-fragments=false

# If multiple database proteins contain exactly the same set of peptides, then
# Percolator will randomly discard all but one of the proteins. If this option
# is set, then the IDs of these duplicated proteins will be reported as a
# comma-separated list. Not available for Fido.
# Available for percolator
protein-report-duplicates=false

# Use the Fido algorithm to infer protein probabilities. Must be true to use any
# of the Fido options.
# Available for percolator
protein=false

# Specify the probability with which a present protein emits an associated
# peptide. Set by grid search (see --fido-gridsearch-depth parameter) if not
# specified.
# Available for percolator if --protein T is set.
fido-alpha=0

# Specify the probability of the creation of a peptide from noise. Set by grid
# search (see --fido-gridsearch-depth parameter) if not specified.
# Available for percolator if --protein T is set.
fido-beta=0

# Specify the prior probability that a protein is present in the sample. Set by
# grid search (see --fido-gridsearch-depth parameter) if not specified.
# Available for percolator if --protein T is set.
fido-gamma=0

# Estimate empirical p-values and q-values for proteins using target-decoy
# analysis.
# Available for percolator if --protein T is set.
fido-empirical-protein-q=false

# Set depth of the grid search for alpha, beta and gamma estimation.
# Available for percolator if --protein T is set.
fido-gridsearch-depth=0

# Q-value threshold that will be used in the computation of the MSE and ROC AUC
# score in the grid search.
# Available for percolator if --protein T is set.
fido-gridsearch-mse-threshold=0.05

# By default, Percolator will examine the learned weights for each feature, and
# if the weight appears to be problematic, then percolator will discard the
# learned weights and instead employ a previously trained, static score vector.
# This switch allows this error checking to be overriden.
# Available for percolator.
override=false

# Use retention time features calculated as in "Improving tandem mass spectrum
# identification using peptide retention time prediction across diverse
# chromatography conditions" by Klammer AA, Yi X, MacCoss MJ and Noble WS.
# (Analytical Chemistry. 2007 Aug 15;79(16):6111-8.).
# Available for percolator
klammer=false

# Report results only at the PSM level.  This flag causes Percolator to skip the
# step that selects the top-scoring PSM per peptide; hence, peptide-level
# results are left out and only PSM-level results are reported.
# Available for percolator
only-psms=false

# Enforce that, for each spectrum, at most one PSM is included in the positive
# set during each training iteration. Note that if the user only provides one
# PSM per spectrum, then this option will have no effect.
# Available for percolator
train-best-positive=false

# Report the number of unique PSMs and total (including shared peptides) PSMs as
# two extra columns in the protein tab-delimited output.
# Available for percolator
spectral-counting-fdr=0

# Include a decoy version of every peptide by shuffling or reversing the target
# sequence or protein. In shuffle or peptide-reverse mode, each peptide is
# either reversed or shuffled, leaving the N-terminal and C-terminal amino acids
# in place. Note that peptides appear multiple times in the target database are
# only shuffled once. In peptide-reverse mode, palindromic peptides are
# shuffled. Also, if a shuffled peptide produces an overlap with the target or
# decoy database, then the peptide is re-shuffled up to 5 times. Note that,
# despite this repeated shuffling, homopolymers will appear in both the target
# and decoy database.
# Available for tide-index
decoy-format=shuffle

# Expression for static and variable mass modifications to include. Specify a
# comma-separated list of modification sequences of the form:
# C+57.02146,2M+15.9949,1STY+79.966331,...
# Available for tide-index.
mods-spec=C+57.02146

# Specifies N-terminal static and variable mass modifications on peptides.
# Specify a comma-separated list of N-terminal modification sequences of the
# form: 1E-18.0106,C-17.0265
# Available for tide-index
nterm-peptide-mods-spec=

# Specifies C-terminal static and variable mass modifications on peptides.
# Specify a comma-separated list of C-terminal modification sequences of the
# form: X+21.9819
# Available for tide-index
cterm-peptide-mods-spec=

# Specifies static and variable mass modifications on proteins' C-terminal.
# [[html:Specifies C-terminal static and variable mass modifications on
# proteins.Mod specification syntax is the same as for peptide mods (see
# nterm-peptide-mods-spec option),but these mods are applied only to peptide
# C-terminals that are also protein terminals.If variable modification are
# provided for both peptide and protein terminal, they will be applied one at a
# time. 
# Available for tide-index
cterm-protein-mods-spec=

# Specifies static and variable mass modifications on proteins N-terminal.
# [[html:Same as cterm-protein-mods-spec, but for  the protein N-terminal.
# Available for tide-index
nterm-protein-mods-spec=

# Specify the name of the file where the binarized fragmentation spectra will be
# stored. Subsequent runs of crux tide-search will execute more quickly if
# provided with the spectra in binary format. The filename is specified relative
# to the current working directory, not the Crux output directory (as specified
# by --output-dir). This option is not valid if multiple input spectrum files
# are given.
# Available for tide-search
store-spectra=

# Enable the calculation of exact p-values for the XCorr score. Calculation of
# p-values increases the running time but increases the number of
# identifications at a fixed confidence threshold. The p-values will be reported
# in a new column with header "exact p-value", and the "xcorr score" column will
# be replaced with a "refactored xcorr" column. Note that, currently, p-values
# can only be computed when the mz-bin-width parameter is set to its default
# value. Variable and static mods are allowed on non-terminal residues in
# conjunction with p-value computation, but currently only static mods are
# allowed on the N-terminus, and no mods on the C-terminus.
# Available for tide-search
exact-p-value=false

# Fast, but heuristic PSM score calibration.
# Available for tide-search
use-tailor-calibration=false

# When providing a FASTA file as the index, the generated binary index will be
# stored at the given path. This option has no effect if a binary index is
# provided as the index.
# Available for tide-search
store-index=

# When set to T, target and decoy search results are reported in a single file,
# and only the top-scoring N matches (as specified via --top-match) are reported
# for each spectrum, irrespective of whether the matches involve target or decoy
# peptides.
# Available for tide-search
concat=false

# Include the file column in tab-delimited output.
# Available for tide-search
file-column=false

# If true, all peaks around the precursor m/z will be removed, within a range
# specified by the --remove-precursor-tolerance option.
# Available for tide-search.
remove-precursor-peak=false

# This parameter specifies the tolerance (in Th) around each precursor m/z that
# is removed when the --remove-precursor-peak option is invoked.
# Available for print-processed spectra and tide-search.
remove-precursor-tolerance=15

# When set to T, for each protein that begins with methionine, tide-index will
# put two copies of the leading peptide into the index, with and without the
# N-terminal methionine.
# Available for tide-index.
clip-nterm-methionine=false

# Prevent duplicate peptides between the target and decoy databases. When set to
# "F", the program keeps all target and previously generated decoy peptides in
# memory. A shuffled decoy will be re-shuffled multiple times to avoid
# duplication. If a non-duplicated peptide cannot be generated, the decoy is
# skipped entirely. When set to "T", every decoy is added to the database
# without checking for duplication. This option reduces the memory requirements
# significantly.
# Available for tide-index.
allow-dups=false

# Controls whether neutral loss ions are considered in the search. For XCorr,
# the loss of ammonia (NH3, 17.0086343 Da) is applied to singly charged b- and
# y-ions, and the loss of water (H2O; 18.0091422) is applied to b-ions. If the
# precursor charge is >=3, then a doubly-charged version of each ion is added.
# For XCorr p-value, three types of neutral losses are included. Loss of ammonia
# and water are applied to b- and y-ions, and a carbon monoxide loss (CO,
# 27.9949) is also applied to b-ions. Higher charge fragments are included for
# all possible charges less than the precursor charge. All neutral loss peaks
# have an intensity 1/10 of the primary peak. Neutral losses are not yet
# implemented for the res-ev score function.
# Available for tide-search.
use-neutral-loss-peaks=true

# The minimum charge state of a spectra to consider in search.
# Available for tide-search.
min-precursor-charge=1

# The maximum charge state of a spectra to consider in search.
# Available for tide-search.
max-precursor-charge=5

# Carries out a peptide-centric search. For each peptide the top-scoring spectra
# are reported, in contrast to the standard spectrum-centric search where the
# top-scoring peptides are reported. Note that in this case the "xcorr rank"
# column will contain the rank of the given spectrum with respect to the given
# candidate peptide, rather than vice versa (which is the default).
# Available for tide-search.
peptide-centric-search=true

# Skip preprocessing steps on spectra. Default = F.
# Available for tide-search
skip-preprocessing=false

# Function used for scoring PSMs. 'xcorr' is the original scoring function used
# by SEQUEST; 'residue-evidence' is designed to score high-resolution MS2
# spectra; and 'both' calculates both scores. The latter requires that
# exact-p-value=T.
# Available for tide-search.
score-function=xcorr

# Mass tolerance (in Da) for scoring pairs of peaks when creating the residue
# evidence matrix. This parameter only makes sense when score-function is
# 'residue-evidence' or 'both'.
# Available for tide-search.
fragment-tolerance=0.02

# This parameter controls the granularity of the entries in the dynamic
# programming matrix used in residue-evidence scoring.Smaller values make the
# program run faster but give less accurate p-values; larger values make the
# program run more slowly but give more accurate p-values.
# Available for tide-search
evidence-granularity=25

# List of positive, non-zero integers.
# Isotope errors to include. Specify a comma-separated list of isotope errors of
# the form: 1,2,3,...Available for tide-search
isotope-error=

# 0=poll CPU to set num threads; else specify num threads directly.
# Available for tide-search tab-delimited files only.
num-threads=1

# Output in tab-delimited text only the file name, scan number, charge, score
# and peptide.Incompatible with mzid-output=T, pin-output=T, pepxml-output=T or
# txt-output=F.
# Available for tide-search
brief-output=true

# Specify that the search results are provided as lists of files, rather than as
# individual files.
# Available for assign-confidence.
list-of-files=false

# Specify the method used to estimate q-values.  The mix-max procedure or
# target-decoy competition apply to PSMs. The peptide-level option eliminates
# any PSM for which there exists a better scoring PSM involving the same
# peptide, and then uses decoys to assign confidence estimates.
# Used by assign-confidence.
estimation-method=tdc

# Adjust the score using the Sidak adjustment and reports them in a new column
# in the output file. Note that this adjustment only makes sense if the given
# scores are p-values, and that it requires the presence of the "distinct
# matches/spectrum" feature for each PSM.
# Used by assign-confidence.
sidak=false

# Specify the column (for tab-delimited input) or tag (for XML input) used as
# input to the q-value estimation procedure. If this parameter is unspecified,
# then the program searches for "xcorr score", "evalue" (comet), "exact p-value"
# score fields in this order in the input file. 
# Used by assign-confidence.
score=

# Specify this parameter to T in order to combine charge states with peptide
# sequencesin peptide-centric search. Works only if estimation-method =
# peptide-level.
# Used by assign-confidence.
combine-charge-states=false

# Specify this parameter to T in order to treat peptides carrying different or
# no modifications as being the same. Works only if estimation = peptide-level.
# Used by assign-confidence.
combine-modified-peptides=false

# The q-value threshold used by cascade search. Each spectrum identified in one
# search with q-value less than this threshold will be excluded from all
# subsequent searches. Note that the threshold is not applied to the final
# database in the cascade.
# Used by cascade-search.
q-value-threshold=0.01

# Predict the specified primary ion series. 'a' indicates a-ions only, 'b'
# indicates b-ions only, 'y' indicates y-ions only, 'by' indicates both b and y,
# 'bya' indicates b, y, and a.
# Only available for crux-predict-peptide-ions. Set automatically to 'by' for
# searching.
primary-ions=by

# Predict the precursor ions, and all associated ions (neutral losses, multiple
# charge states) consistent with the other specified options.
# Only available for crux-predict-peptide-ions.
precursor-ions=false

# Predict the given number of isotope peaks (0|1|2).
# Only available for crux-predict-peptide-ion.  Automatically set to 0 for Sp
# scoring and 1 for xcorr scoring.
isotope=0

# Predict flanking peaks for b- and y ions.
# Only available for crux-predict-peptide-ion.
flanking=false

# Predict theoretical ions up to max charge state (1, 2, ... ,6) or up to the
# charge state of the peptide ("peptide"). If the max-ion-charge is greater than
# the charge state of the peptide, then the maximum is the peptide charge. 
# Available for predict-peptide-ions. Set to 'peptide' for search.
max-ion-charge=peptide

# Include among the predicted peaks b/y ions with up to n losses of nh3. For
# example, for --nh3 2, predict a peak for each b- and y-ion with the loss of
# one nh3 group and predict a second peak for each b- and y-ion with the loss of
# two nh3 groups. These peaks will have 1 and 2, respectively, in the NH3 column
# of the output.
# Only available for crux-predict-peptide-ions.
nh3=0

# Include in the predicted peaks, b/y ions with the loss of 1 to n water
# molecules. See --nh3 for an example.
# Only available for crux-predict-peptide-ions.
h2o=0

# The name of the file in FASTA format.
# Option for spectral-counts
protein-database=

# Type of analysis to make on the match results: (RAW|NSAF|dNSAF|SIN|EMPAI).
# With exception of the RAW metric, the database of sequences need to be
# provided using --protein-database.
# Available for spectral-counts.  RAW is raw counts, NSAF is Normalized Spectral
# Abundance Factor, dNSAF is Distributed Spectral Abundance Factor, SIN is
# Spectral Index Normalized and EMPAI is Exponentially Modified Protein
# Abundance Index
measure=NSAF

# Ignore peptides that map to multiple proteins.
# Available for spectral-counts.
unique-mapping=false

# Quantification at protein or peptide level.
# Available for spectral-counts and either NSAF and SIN.
quant-level=protein

# Perform a parsimony analysis on the proteins, and report a "parsimony rank"
# column in the output file. This column contains integers indicating the
# protein's rank in a list sorted by spectral counts. If the parsimony analysis
# results in two proteins being merged, then their parsimony rank is the same.
# In such a case, the rank is assigned based on the largest spectral count of
# any protein in the merged meta-protein. The "simple" parsimony algorithm only
# merges two proteins A and B if the peptides identified in protein A are the
# same as or a subset of the peptides identified in protein B. The "greedy"
# parsimony algorithm does additional merging, by identifying the longest
# protein (i.e., the protein with the most peptides) that contains one or more
# shared peptides. The shared peptides are assigned to the identified protein
# and removed from any other proteins that contain them, and the process is then
# repeated. Note that, with this option, some proteins end up being assigned no
# peptides at all; these orphan proteins are not reported in the output.
# Available for spectral-counts.
parsimony=none

# Determines what type of threshold to use when filtering matches. none : read
# all matches, qvalue : use calculated q-value from percolator, custom : use
# --custom-threshold-name and --custom-threshold-min parameters.
# used for crux spectral-counts
threshold-type=qvalue

# Only consider PSMs with a threshold value. By default, q-values are
# thresholded using a specified threshold value. This behavior can be changed
# using the --custom-threshold and --threshold-min parameters.
# Available for spectral-counts. All PSMs with higher (or lower) than this will
# be ignored.
threshold=0.01

# Specify which field to apply the threshold to. The direction of the threshold
# (<= or >=) is governed by --custom-threshold-min. By default, the threshold
# applies to the percolator q-value, specified by "percolator q-value".
# Available for spectral-counts.
custom-threshold-name=

# When selecting matches with a custom threshold, custom-threshold-min
# determines whether to filter matches with custom-threshold-name values that
# are greater-than or equal (F) or less-than or equal (T) than the threshold.
# Available for spectral-counts.
custom-threshold-min=true

# MS2 file corresponding to the psm file. Required to measure the SIN. Ignored
# for NSAF, dNSAF and EMPAI.
# Available for spectral-counts with measure=SIN.
input-ms2=

# Use mzid's passThreshold attribute to filter matches.
# Used when parsing mzIdentML files.
mzid-use-pass-threshold=false

# Change the mass of all amino acids 'A' by the given amount.
# 
A=0

# Change the mass of all amino acids 'C' by the given amount.
# 
C=57.021464

# Change the mass of all amino acids 'D' by the given amount.
# 
D=0

# Change the mass of all amino acids 'E' by the given amount.
# 
E=0

# Change the mass of all amino acids 'F' by the given amount.
# 
F=0

# Change the mass of all amino acids 'G' by the given amount.
# 
G=0

# Change the mass of all amino acids 'H' by the given amount.
# 
H=0

# Change the mass of all amino acids 'I' by the given amount.
# 
I=0

# Change the mass of all amino acids 'K' by the given amount.
# 
K=0

# Change the mass of all amino acids 'L' by the given amount.
# 
L=0

# Change the mass of all amino acids 'M' by the given amount.
# 
M=0

# Change the mass of all amino acids 'N' by the given amount.
# 
N=0

# Change the mass of all amino acids 'P' by the given amount.
# 
P=0

# Change the mass of all amino acids 'Q' by the given amount.
# 
Q=0

# Change the mass of all amino acids 'R' by the given amount.
# 
R=0

# Change the mass of all amino acids 'S' by the given amount.
# 
S=0

# Change the mass of all amino acids 'T' by the given amount.
# 
T=0

# Change the mass of all amino acids 'V' by the given amount.
# 
V=0

# Change the mass of all amino acids 'W' by the given amount.
# 
W=0

# Change the mass of all amino acids 'Y' by the given amount.
# 
Y=0

# Legal values are auto, tsv, sqt, pepxml or mzidentml format.
# option, for psm-convert
input-format=auto

# Whether matches/ion are distinct (as opposed to total).
# option, for psm-convert.
distinct-matches=true

# Rather than the spectrum, output summary statistics to standard output. Each
# statistic is placed on a separate line, in the format <name>:<value> (e.g.
# "TIC:1000.0").
# Available only for crux-get-ms2-spectrum.  Does not affect contents of the
# output file.
stats=false

# Determines which spectral feature detection algorithm to use. Different
# results are possible with each algorithm, and there are pros and cons to each.
# Available for crux hardklor
hardklor-algorithm=version1

# Defines alternative averagine models in the analysis that incorporate
# additional atoms and/or isotopic enrichments. Modifications are represented as
# text strings. Inclusion of additional atoms in the model is done using by
# entering an atomic formula, such as: PO2 or Cl. Inclusion of isotopic
# enrichment to the model is done by specifying the percent enrichment (as a
# decimal) followed by the atom being enriched and an index of the isotope. For
# example, 0.75H1 specifies 75% enrichment of the first heavy isotope of
# hydrogen. In other words, 75% deuterium enrichment. Two or more modifications
# can be combined into the same model, and separated by spaces: B2 0.5B1
# Available for crux hardklor
averagine-mod=

# Boxcar averaging is a sliding window that averages n adjacent spectra prior to
# feature detection. Averaging generally improves the signal-to-noise ratio of
# features in the spectra, as well as improving the shape of isotopic envelopes.
# However, averaging will also change the observed peak intensities. Averaging
# with too wide a window will increase the occurrence of overlapping features
# and broaden the chromatographic profiles of observed features. The number
# specified is the total adjacent scans to be combined, centered on the scan
# being analyzed. Therefore, an odd number is recommended to center the boxcar
# window. For example, a value of 3 would produce an average of the scan of
# interest, plus one scan on each side. A value of 0 disables boxcar averaging.
# Available for crux hardklor
boxcar-averaging=0

# This parameter is only functional when boxcar-averaging is used. The filter
# will remove any peaks not seen in n scans in the boxcar window. The effect is
# to reduce peak accumulation due to noise and reduce chromatographic broadening
# of peaks. Caution should be used as over-filtering can occur. The suggested
# number of scans to set for filtering should be equal to or less than the
# boxcar-averaging window size. A value of 0 disables filtering.
# Available for crux hardklor
boxcar-filter=0

# This parameter is only functional when boxcar-filter is used. The value
# specifies the mass tolerance in ppm for declaring a peak the same prior to
# filtering across all scans in the boxcar window.
# Available for crux hardklor
boxcar-filter-ppm=10

# Indicates whether the data contain profile or centroided peaks.
# Available for crux hardklor
centroided=false

# Choose the charge state determination method.
# Available for crux hardklor
cdm=Q

# Specifies the minimum charge state to allow when finding spectral features. It
# is best to set this value to the lowest assumed charge state to be present. If
# set higher than actual charge states that are present, those features will not
# be identified or incorrectly assigned a different charge state and mass.
# Available for crux hardklor
min-charge=1

# Specifies the maximum charge state to allow when finding spectral features. It
# is best to set this value to a practical number (i.e. do not set it to 20 when
# doing a tryptic shotgun analysis). If set higher than actual charge states
# that are present, the algorithm will perform significantly slower without any
# improvement in results.
# Available for crux hardklor
max-charge=5

# Sets the correlation threshold (cosine similarity) for accepting each
# predicted feature.
# Available for crux hardklor
corr=0.85

# Sets the depth of combinatorial analysis. For a given set of peaks in a
# spectrum, search for up to this number of combined peptides that explain the
# observed peaks. The analysis stops before depth is reached if the current
# number of deconvolved features explains the observed peaks with a correlation
# score above the threshold defined with the correlation parameter.
# Available for crux hardklor
depth=3

# When reporting each feature, report abundance as the sum of all isotope peaks.
# The value reported is the estimate of the correct peak heights based on the
# averagine model scaled to the observed peak heights.
# Available for crux hardklor
distribution-area=false

# Specifies an ASCII text file that defines symbols for the periodic table.
# Available for crux hardklor
hardklor-data-file=

# Indicates the type of instrument used to collect data. This parameter,
# combined with the resolution parameter, define how spectra will be centroided
# (if you provide profile spectra) and the accuracy when aligning observed peaks
# to the models.
# Available for crux hardklor
instrument=fticr

# Specifies an ASCII text file that can be read to override the natural isotope
# abundances for all elements.
# Available for crux hardklor
isotope-data-file=

# Specifies the maximum number of models to build for a set of peaks being
# analyzed. Regardless of the setting, the number of models will never exceed
# the number of peaks in the current set. However, as many of the low abundance
# peaks are noise or tail ends of distributions, defining models for them is
# detrimental to the analysis.
# Available for crux hardklor
max-features=10

# Filters the spectra prior to analysis for the requested MS/MS level. For
# example, if the data contain MS and MS/MS spectra, setting mzxml-filter = 1
# will analyze only the MS scan events. Setting mzxml-filter = 2 will analyze
# only the MS/MS scan events.
# Available for crux hardklor
mzxml-filter=1

# Constrains the search in each spectrum to signals below this value in
# Thomsons. Setting to 0 disables this feature.
# Available for crux hardklor
mz-max=0

# Constrains the search in each spectrum to signals above this value in
# Thomsons. Setting to 0 disables this feature.
# Available for crux hardklor
mz-min=0

# Only used when algorithm = version1. Defines the maximum window size in
# Thomsons to analyze when deconvolving peaks in a spectrum into features.
# Available for crux hardklor
mz-window=4

# Specifies the resolution of the instrument at 400 m/z for the data being
# analyzed.
# Available for crux hardklor
resolution=100000

# Used to restrict analysis to spectra with scan numbers below this parameter
# value. A value of 0 disables this feature.
# Available for crux hardklor
scan-range-max=0

# Used to restrict analysis to spectra with scan numbers above this parameter
# value. A value of 0 disables this feature.
# Available for crux hardklor
scan-range-min=0

# Set the sensitivity level. There are four levels: 0 (low), 1 (moderate), 2
# (high), and 3 (max). Increasing the sensitivity will increase computation
# time, but will also yield more isotope distributions.
# Available for crux hardklor
sensitivity=2

# Filters spectra to remove peaks below this signal-to-noise ratio prior to
# finding features.
# Available for crux hardklor
signal-to-noise=1

# Uses Savitzky-Golay smoothing on profile peak data prior to centroiding the
# spectra. This parameter is recommended for low resolution spectra only.
# Smoothing data causes peak depression and broadening. Only use odd numbers for
# the degree of smoothing (as it defines a window centered on each data point).
# Higher values will produce smoother peaks, but with greater depression and
# broadening. Setting this parameter to 0 disables smoothing.
# Available for crux hardklor
smooth=0

# Set the signal-to-noise window length (in m/z). Because noise may be
# non-uniform across a spectrum, this value adjusts the segment size considered
# when calculating a signal-over-noise ratio.
# Available for crux hardklor
sn-window=250

# Applies the lowest noise threshold of any sn_window across the entire mass
# range for a spectrum. Setting this parameter to 0 turns off this feature, and
# different noise thresholds will be used for each local mass window in a
# spectrum.
# Available for crux hardklor
static-sn=true

# Ignore PPIDs that persist for longer than this length of time in the MS1
# spectra. The unit of time is whatever unit is used in your data file (usually
# minutes). These PPIDs are considered contaminants.
# Available for crux bullseye
max-persist=2

# When true, require an exact match (as defined by --exact-tolerance) between
# the center of the precursor isolation window in the MS2 scan and the base
# isotopic peak of the PPID. If this option is set to false and no exact match
# is observed, then attempt to match using a wider m/z tolerance. This wider
# tolerance is calculated using the PPID's monoisotopic mass and charge (the
# higher the charge, the smaller the window).
# Available for crux bullseye
exact-match=false

# Allowed gap size when checking for PPIDs across consecutive MS1 scans.
# Available for crux bullseye
gap-tolerance=1

# Only consider PPIDs above this minimum mass in daltons.
# Available for crux bullseye
bullseye-min-mass=600

# Only consider PPIDs below this maximum mass in daltons.
# Available for crux bullseye
bullseye-max-mass=8000

# Set the tolerance (+/-ppm) for --exact-match.
# Available for crux bullseye
exact-tolerance=10

# Set the mass tolerance (+/-ppm) for finding PPIDs in consecutive MS1 scans.
# Available for crux bullseye
persist-tolerance=10

# Total number of MS1 scans over which a PPID must be observed to be considered
# real. Gaps in persistence are allowed by setting --gap-tolerance.
# Available for crux bullseye
scan-tolerance=3

# Set the tolerance (+/-units) around the retention time over which a PPID can
# be matches to the MS2 spectrum. The unit of time is whatever unit is used in
# your data file (usually minutes).
# Available for crux bullseye
retention-tolerance=0.5

# The format to write the output spectra to. If empty, the spectra will be
# output in the same format as the MS2 input.
# Available for crux bullseye
spectrum-format=

# Run the Bullseye algorithm on the given MS data, using it to assign
# high-resolution precursor values to the MS/MS data. If a spectrum file ends
# with .ms2 or .cms2, matching .ms1/.cms1 files will be used as the MS1 file.
# Otherwise, it is assumed that the spectrum file contains both MS1 and MS2
# scans.
# Available for crux pipeline
bullseye=false

# Specify which search engine to use.
# Available for crux pipeline
search-engine=tide-search

# Specify which post-processor to apply to the search results.
# Available for crux pipeline
post-processor=percolator

# Minimum precursor m/z value to use in measurement error estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-min-precursor-mz=400

# Minimum precursor m/z value to use in measurement error estimation.
# Available for param-medic, tide-search, comet and kojak
pm-max-precursor-mz=1800

# Minimum fragment m/z value to use in measurement error estimation.
# Available for param-medic, tide-search, comet and kojak
pm-min-frag-mz=150

# Maximum fragment m/z value to use in measurement error estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-max-frag-mz=1800

# Minimum fragment peaks an MS/MS scan must contain to be used in measurement
# error estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-min-scan-frag-peaks=40

# Maximum ppm distance between precursor m/z values to consider two scans
# potentially generated by the same peptide for measurement error estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-max-precursor-delta-ppm=50

# Precursor charge states to consider MS/MS spectra from, in measurement error
# estimation, provided as comma-separated values.
# Available for param-medic, tide-search, comet, and kojak
pm-charges=0,2,3,4

# Number of most-intense fragment peaks to consider for measurement error
# estimation, per MS/MS spectrum.
# Available for param-medic, tide-search, comet, and kojak
pm-top-n-frag-peaks=30

# Number of fragment peaks per spectrum pair to be used in fragment error
# estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-pair-top-n-frag-peaks=5

# Number of the most-intense peaks that two spectra must share in order to
# potentially be generated by the same peptide, for measurement error
# estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-min-common-frag-peaks=20

# Maximum number of scans two spectra can be separated by in order to be
# considered potentially generated by the same peptide, for measurement error
# estimation.
# Available for param-medic, tide-search, comet, and kojak
pm-max-scan-separation=1000

# Minimum number of peak pairs (for precursor or fragment) that must be
# successfully paired in order to attempt to estimate measurement error
# distribution.
# Available for param-medic, tide-search, comet, and kojak
pm-min-peak-pairs=200

# Ignore implied modifications where the absolute value of its mass is below
# this value and only score the unmodified peptide.
# Available for localize-modification
min-mod-mass=0

# Number of threads to use when searching spectra. A value of 0 will
# automatically match the number of threads to the number of processing cores on
# the computer. Additionally, negative numbers can be used to specify threads
# equal to all but that number of cores.
# Available for kojak
threads=0

# Values between 0 and 1 to describe 18O atom percent excess (APE). For example,
# 0.25 equals 25 APE.
# Available for kojak
enrichment=0

# Specifies a dynamic mass adjustment to be applied to all indicated amino acids
# during spectral analysis. Peptides containing the indicated amino acids are
# tested with and without the dynamic modification mass. Amino acids are
# identified by their single letter designation. N-terminal and C-terminal
# dynamic peptide modifications are designated by n and c, respectively. The
# relative mass difference, positive or negative, is listed after the amino
# acid, separated by a space. If multiple dynamic modification masses are
# desired, including to the same amino acid, provide them as a comma-separated
# list enclosed with quotation marks. For example: "M 15.9949, STY 79.966331".
# Available for kojak
modification=M 15.9949

# The name of file from which to parse the predicted retention time of each
# peptide in the database. The file is tab-delimited where the first column is
# peptide and the second column is the predicted rt information. The rt
# prediction doesn't require normalization beforehand. If the peptide in the
# database is missing in the prediction, its predicted value will be imputed by
# the median of all predicted values.
# It is optional but recommended for DIAmeter. It can be easily generated by
# DeepRT or any off-the-shelf RT prediction tools by feeding in the peptide-list
# generated by tide-index
predrt-files=

# Analogous to the peak-picking in MS Amanda, the m/z range is divided into 10
# equal length segments, and in each segment, the k most intense peaks are
# preserved.
# It is used for DIAmeter
msamanda-regional-topk=10

# (2*coelution-oneside-scans+1) scans will be used to construct the chromatogram
# for coelution correlation analysis
# It is used for DIAmeter
coelution-oneside-scans=3

# The number of topk values to consider to calculate precursor fragment
# co-elution
# It is used for DIAmeter
coelution-topk=1

# Tolerance used for matching precursors to spectra. Peptides must be within +/-
# ‘precursor-ppm’ parts-per-million (ppm) of the spectrum precursor m/z
# It is used for DIAmeter. Default = 10 (orbitrap) and =30 (triptof)
prec-ppm=10

# Tolerance used for matching fragment ions to spectrum peaks. Fragment ions
# must be within +/- 'fragment-ppm' of the spectrum peak value.
# It is used for DIAmeter. Default = 10 (orbitrap) and =30 (triptof)
frag-ppm=10

# Make the ScanNr of each PSM unique in the .pin file.
# It is used for make-pin
unique-scannr=false

# Filter the PSM by the ensemble score.
# It is used for DIAmeter
psm-filter=false

# Eliminate MS2 peak if neither of the adjacent scans contains the same peak
# within a specified tolerance.
# It is used for DIAmeter
spectra-denoising=false

# Specify the instrument platform used to acquire the input spectra. This option
# selects among different sets of coefficient values for the scores computed by
# diameter. Specifically, the 'orbitrap' setting is equivalent to
# spectra-denoising=false, psm-filter=false, prec-ppm=10,frag-ppm=10; the
# 'tof5600' is equivalent to spectra-denoising=true, psm-filter=true,
# prec-ppm=30, frag-ppm=30, coeff-precursor=3.2, coeff-fragment=0.2,
# coeff-rtdiff=0.2, coeff-elution=0.2; the 'tof6600' is equivalent to
# spectra-denoising=false, psm-filter=true, prec-ppm=30, frag-ppm=30,
# coeff-precursor=25.6, coeff-fragment=0.2, coeff-rtdiff=0.2, coeff-elution=0.
# Use diameter-instrument=na to set individual parameters.  Otherwise,
# parameters set using diameter-instrument will override any parameters set
# separately. 
# It is used for DIAmeter
diameter-instrument=na

####################
# Comet Parameters #
####################
# 0=no, 1=concatenated search, 2=separate search.
# Available for comet.
decoy_search=0

# 0=normal FASTA format,1=PEFF PSI-MOD modifications and amino acid
# variants,2=PEFF Unimod modifications and amino acid variants,3=PEFF PSI-MOD
# modifications, skipping amino acid variants,4=PEFF Unimod modifications,
# skipping amino acid variants,5=PEFF amino acid variants, skipping PEFF
# modifications.
# Available for comet.
peff_format=0

# A full or relative path to the OBO file used with a PEFF search. Supported OBO
# formats are PSI-Mod and Unimod OBO files. Which OBO file you use depends on
# your PEFF input file. This parameter is ignored if "peff_format = 0". There is
# no default value if this parameter is missing.
# Available for comet.
peff_obo=

# 0=poll CPU to set num threads; else specify num threads directly.
# Available for comet.
num_threads=0

# Controls the mass tolerance value.  The mass tolerance is set at +/- the
# specified number i.e. an entered value of "1.0" applies a -1.0 to +1.0
# tolerance. The units of the mass tolerance is controlled by the parameter
# "peptide_mass_units". 
# Available for comet.
peptide_mass_tolerance=3

# 0=amu, 1=mmu, 2=ppm.
# Available for comet.
peptide_mass_units=0

# Automatically estimate optimal value for the peptide_mass_tolerance parameter
# from the spectra themselves. false=no estimation, warn=try to estimate but use
# the default value in case of failure, fail=try to estimate and quit in case of
# failure.
# Available for comet.
auto_peptide_mass_tolerance=false

# 0=average masses, 1=monoisotopic masses.
# Available for comet.
mass_type_parent=1

# 0=average masses, 1=monoisotopic masses.
# Available for comet.
mass_type_fragment=1

# 0=singly charged peptide mass, 1=precursor m/z.
# Available for comet.
precursor_tolerance_type=0

# 0=off, 1=0/1 (C13 error), 2=0/1/2, 3=0/1/2/3, 4=--8/-4/0/4/8 (for +4/+8
# labeling), 5=-1/0/1/2/3.
# Available for comet.
isotope_error=0

# Specify a search enzyme from the end of the parameter file.
# Available for comet.
search_enzyme_number=1

# Specify a second search enzyme from the end of the parameter file.
# Available for comet.
search_enzyme2_number=0

# valid values are 1 (semi-digested), 2 (fully digested), 8 N-term, 9 C-term.
# Available for comet.
num_enzyme_termini=2

# Maximum value is 5; for enzyme search.
# Available for comet.
allowed_missed_cleavage=2

# Binning to use on fragment ions.
# Available for comet.
fragment_bin_tol=1.000507

# Offset position to start the binning (0.0 to 1.0).
# Available for comet and kojak.
fragment_bin_offset=0.4

# Automatically estimate optimal value for the fragment_bin_tol parameter from
# the spectra themselves. false=no estimation, warn=try to estimate but use the
# default value in case of failure, fail=try to estimate and quit in case of
# failure.
# Available for comet.
auto_fragment_bin_tol=false

# Automatically infer modifications from the spectra themselves.
# Available for comet.
auto_modifications=false

# 0=default peak shape, 1=M peak only.
# Available for comet.
theoretical_fragment_ions=1

# Controls whether or not A-ions are considered in the search (0 - no, 1 - yes).
# Available for comet.
use_A_ions=0

# Controls whether or not B-ions are considered in the search (0 - no, 1 - yes).
# Available for comet.
use_B_ions=1

# Controls whether or not C-ions are considered in the search (0 - no, 1 - yes).
# Available for comet.
use_C_ions=0

# Controls whether or not X-ions are considered in the search (0 - no, 1 - yes).
# Available for comet.
use_X_ions=0

# Controls whether or not Y-ions are considered in the search (0 - no, 1 - yes).
# Available for comet.
use_Y_ions=1

# Controls whether or not Z-ions are considered in the search (0 - no, 1 - yes).
# Available for comet.
use_Z_ions=0

# 0=no, 1= yes to consider NH3/H2O neutral loss peak.
# Available for comet.
use_NL_ions=1

# Controls whether or not Z1-ions are considered in the search (0 - no, 1 -
# yes).
# Available for comet.
use_Z1_ions=0

# 0=no, 1=yes  write mzIdentML file.
# Available for comet.
output_mzidentmlfile=0

# 0=no, 1=yes  write sqt file.
# Available for comet.
output_sqtstream=0

# 0=no, 1=yes  write sqt file.
# Available for comet.
output_sqtfile=0

# 0=no, 1=yes  write tab-delimited text file.
# Available for comet.
output_txtfile=1

# 0=no, 1=yes  write pep.xml file.
# Available for comet.
output_pepxmlfile=1

# 0=no, 1=yes write percolator file.
# Available for comet.
output_percolatorfile=0

# 0=no, 1=yes to replace Sp with expect in out & sqt.
# Available for comet.
print_expect_score=1

# num peptide results to show.
# Available for comet.
num_output_lines=5

# 0=no, 1=yes for out files only.
# Available for comet.
show_fragment_ions=0

# Sample enzyme which is possibly different than the one applied to the search.
# Used to calculate NTT & NMC in pepXML output.
# Available for comet. 
sample_enzyme_number=1

# Start and scan scan range to search; 0 as first entry ignores parameter.
# Available for comet.
scan_range=0 0

# Precursor charge range to analyze; does not override mzXML charge; 0 as first
# entry ignores parameter.
# Available for comet.
precursor_charge=0 0

# Specifies the whether to override existing precursor charge state information
# when present in the files with the charge range specified by the
# "precursor_charge" parameter.
# Available for comet.
override_charge=0

# MS level to analyze, valid are levels 2 or 3.
# Available for comet. 
ms_level=2

# Specifies which scan types are searched.
# Available for comet. 
activation_method=ALL

# MH+ peptide mass range to analyze.
# Available for comet.
digest_mass_range=600.0 5000.0

# Number of search hits to store internally.
# Available for comet.
num_results=50

# For '.out' file output only, 0=search everything again, 1=don't search if .out
# exists.
# Available for comet.
skip_researching=1

# Set maximum fragment charge state to analyze (allowed max 5).
# Available for comet.
max_fragment_charge=3

# Sets the maximum indexed database search run time for a scan/query. Valid
# values are integers 0 or higher representing the maximum run time in
# milliseconds. As Comet loops through analyzing peptides from the database
# index file, it checks the cummulative run time of that spectrum search after
# each peptide is analyzed. If the run time exceeds the value set for this
# parameter, the search is aborted and the best peptide result analyzed up to
# that point is returned. To have no maximum search time, set this parameter
# value to "0". The default value is "0".
# Available for comet.
max_index_runtime=0

# Set maximum precursor charge state to analyze (allowed max 9).
# Available for comet.
max_precursor_charge=6

# 0=proteinDB, 1-6, 7=forward three, 8=reverse three, 9=all six.
# Available for comet.
nucleotide_reading_frame=0

# 0=leave sequences as-is; 1=also consider sequence w/o N-term methionine.
# Available for comet.
clip_nterm_methionine=0

# 0=Comet deltaCn reported between the top peptide and the first dissimilar
# peptide, 1=Comet deltaCn reported between the top two peptides.
# Available for comet.
explicit_deltacn=0

# 0=Comet will use mass based modification encodings, 1=Comet will use the old
# character based modification encodings.
# Available for comet.
old_mods_encoding=0

# Maximum number of spectra to search at a time; 0 to search the entire scan
# range in one loop.
# Available for comet.
spectrum_batch_size=0

# Specifies the prefix of the protein names that indicates a decoy.
# Available for comet.
decoy_prefix=decoy_

# Specifies the a custom extension for output text file.
# Available for comet.
text_file_extension=

# Specifies the suffix string that is appended to the base output name for the
# pep.xml, pin.xml, txt and sqt output files.
# Available for comet.
output_suffix=

# Defines the length range of peptides to search. This parameter has two integer
# values. The first value is the minimum length cutoff and the second value is
# the maximum length cutoff. Only peptides within the specified length range are
# analyzed. The maximum peptide length that Comet can analyze is 63. The default
# values are "1 63".
# Available for comet.
peptide_length_range=1 63

# Controls whether or not precursor neutral loss peaks are considered in the
# xcorr scoring. If left blank, this parameter is ignored.  To consider
# precursor neutral loss peaks, add one or more neutral loss mass value
# separated by a space.  Each entered mass value will be subtracted from the
# experimentral precursor mass and resulting neutral loss m/z values for all
# charge states (from 1 to precursor charge) will be analyzed. As these neutral
# loss peaks are analyzed along side fragment ion peaks, the fragment tolerance
# settings (fragment_bin_tol, fragment_bin_offset, theoretical_fragment_ion)
# apply to the precursor neutral loss peaks. The default value is blank/unused.
# Available for comet.
precursor_NL_ions=

# This parameter controls whether the Comet treats isoleucine (I) and leucine
# (L) as the same/equivalent with respect to a peptide identification. 0 treats
# I and L as different, 1 treats I and L as the same. The default value is "1"
# Available for comet.
equal_I_and_L=1

# Specifies one or more mass offsets to apply. This value(s) are effectively
# subtracted from each precursor mass such that peptides that are smaller than
# the precursor mass by the offset value can still be matched to the respective
# spectrum.
# Available for comet.
mass_offsets=

# defines the maximum number of proteins (identifiers/accessions) to report. If
# a peptide is present in 6 total protein sequences, there is one (first)
# reference protein and 5 additional duplicate proteins. This parameter controls
# how many of those 5 additional duplicate proteins are reported.If
# "decoy_search = 2" is set to report separate target and decoy results, this
# parameter will be applied to the target and decoy outputs separately. If set
# to "-1", there will be no limit on the number of reported additional proteins.
# The default value is "20" if this parameter is missing.
# Available for comet.
max_duplicate_proteins=20

# Minimum number of peaks in spectrum to search.
# Available for comet.
minimum_peaks=10

# Minimum intensity value to read in.
# Available for comet. 
minimum_intensity=0

# 0=no, 1=yes, 2=all charge reduced precursor peaks (for ETD).
# Available for comet. 
remove_precursor_peak=0

# +- Da tolerance for precursor removal.
# Available for comet. 
remove_precursor_tolerance=1.5

# For iTRAQ/TMT type data; will clear out all peaks in the specified m/z range.
# Available for comet.
clear_mz_range=0.0 0.0

# Up to 9 variable modifications are supported. Each modification is specified
# using seven entries: "<mass> <residues> <type> <max> <distance> <terminus>
# <force>." Type is 0 for static mods and non-zero for variable mods. Note that
# that if you set the same type value on multiple modification entries, Comet
# will treat those variable modifications as a binary set. This means that all
# modifiable residues in the binary set must be unmodified or modified. Multiple
# binary sets can be specified by setting a different binary modification value.
# Max is an integer specifying the maximum number of modified residues possible
# in a peptide for this modification entry. Distance specifies the distance the
# modification is applied to from the respective terminus: -1 = no distance
# contraint; 0 = only applies to terminal residue; N = only applies to terminal
# residue through next N residues. Terminus specifies which terminus the
# distance constraint is applied to: 0 = protein N-terminus; 1 = protein
# C-terminus; 2 = peptide N-terminus; 3 = peptide C-terminus.Force specifies
# whether peptides must contain this modification: 0 = not forced to be present;
# 1 = modification is required.
# Available for comet.
variable_mod01=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod02=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod03=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod04=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod05=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod06=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod07=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod08=0.0 null 0 4 -1 0 0

# See syntax for variable_mod01.
# Available for comet.
variable_mod09=0.0 null 0 4 -1 0 0

# Specifies the total/maximum number of residues that can be modified in a
# peptide.
# Available for comet.
max_variable_mods_in_peptide=5

# Controls whether the analyzed peptides must contain at least one variable
# modification.
# Available for comet.
require_variable_mod=0

# Specifiy a static modification to the c-terminus of all peptides.
# Available for comet.
add_Cterm_peptide=0

# Specify a static modification to the n-terminus of all peptides.
# Available for comet.
add_Nterm_peptide=0

# Specify a static modification to the c-terminal peptide of each protein.
# Available for comet.
add_Cterm_protein=0

# Specify a static modification to the n-terminal peptide of each protein.
# Available for comet.
add_Nterm_protein=0

# Specify a static modification to the residue A.
# Available for comet.
add_A_alanine=0

# Specify a static modification to the residue B.
# Available for comet.
add_B_user_amino_acid=0

# Specify a static modification to the residue C.
# Available for comet.
add_C_cysteine=57.021464

# Specify a static modification to the residue D.
# Available for comet.
add_D_aspartic_acid=0

# Specify a static modification to the residue E.
# Available for comet.
add_E_glutamic_acid=0

# Specify a static modification to the residue F.
# Available for comet.
add_F_phenylalanine=0

# Specify a static modification to the residue G.
# Available for comet.
add_G_glycine=0

# Specify a static modification to the residue H.
# Available for comet.
add_H_histidine=0

# Specify a static modification to the residue I.
# Available for comet.
add_I_isoleucine=0

# Specify a static modification to the residue J.
# Available for comet.
add_J_user_amino_acid=0

# Specify a static modification to the residue K.
# Available for comet.
add_K_lysine=0

# Specify a static modification to the residue L.
# Available for comet.
add_L_leucine=0

# Specify a static modification to the residue M.
# Available for comet.
add_M_methionine=0

# Specify a static modification to the residue N.
# Available for comet.
add_N_asparagine=0

# Specify a static modification to the residue O.
# Available for comet.
add_O_pyrrolysine=0

# Specify a static modification to the residue P.
# Available for comet.
add_P_proline=0

# Specify a static modification to the residue Q.
# Available for comet.
add_Q_glutamine=0

# Specify a static modification to the residue R.
# Available for comet.
add_R_arginine=0

# Specify a static modification to the residue S.
# Available for comet.
add_S_serine=0

# Specify a static modification to the residue T.
# Available for comet.
add_T_threonine=0

# Specify a static modification to the residue U.
# Available for comet.
add_U_selenocysteine=0

# Specify a static modification to the residue V.
# Available for comet.
add_V_valine=0

# Specify a static modification to the residue W.
# Available for comet.
add_W_tryptophan=0

# Specify a static modification to the residue X.
# Available for comet.
add_X_user_amino_acid=0

# Specify a static modification to the residue Y.
# Available for comet.
add_Y_tyrosine=0

# Specify a static modification to the residue Z.
# Available for comet.
add_Z_user_amino_acid=0

# Automatically estimate optimal value for the <code>ppm_tolerance_pre</code>
# parameter from the spectra themselves. false=no estimation, warn=try to
# estimate but use the default value in case of failure, fail=try to estimate
# and quit in case of failure.
# Available for kojak.
auto_ppm_tolerance_pre=false

# Automatically estimate optimal value for the <code>fragment_bin_size</code>
# parameter from the spectra themselves. false=no estimation, warn=try to
# estimate but use the default value in case of failure, fail=try to estimate
# and quit in case of failure.
# Available for kojak.
auto_fragment_bin_size=false

# Exports results in Percolator text format (PIN format).
# Available for kojak
export_percolator=true

# Exports results in pepXML format.
# Available for kojak
export_pepXML=false

# Exports results in mzID format.
# Available for kojak
export_mzID=false

# Values are: 0=Orbitrap, 1=FTICR (such as Thermo LTQ-FT).
# Available for kojak
kojak_instrument=0

# Are the precursor ion (MS1) scans centroided?
# Available for kojak
MS1_centroid=true

# Are the fragment ion (MS2) scans centroided?
# Available for kojak
MS2_centroid=true

# Resolution at 400 m/z, value ignored if data are already centroided.
# Available for kojak
MS1_resolution=30000

# Resolution at 400 m/z, value ignored if data are already centroided.
# Available for kojak
MS2_resolution=25000

# Specifies the sites of cross-linking and mass modification. Four values
# specify a cross-link. The first two values are one or more amino acid letters
# (uppercase only) that can be linked. These can be the same or different
# depending on whether the cross-linker is homobifunctional or
# heterobifunctional. Use lowercase ‘n’ or ‘c’ if the linker can bind
# the protein termini. The third value is the net mass value of the cross-linker
# when bound to the peptides. The mass can be any real number, positive or
# negative. The identifier is any name desired for the cross-linker. If the data
# contain multiple cross-linkers, provide them as a comma-separated list
# enclosed with quotation marks. For example, a sample cross-linked with both
# BS3 and EDC could be specified as "nK nK 138.068074 BS3, DE nK -18.0106 EDC".
# Available for kojak
cross_link=nK nK 138.068074 BS3

# Specifies the sites of incomplete cross-linking (i.e. a mono-link) and mass
# modification. Two values follow this parameter, separated by spaces. The first
# value is one or more amino acid letters (uppercase only) that can be linked.
# Use lowercase ‘n’ or ‘c’ if the linker can bind the protein termini.
# The second value is the net mass of the incomplete cross-link reaction. The
# mass can be any real number, positive or negative. If multiple mono-links are
# possible (e.g. with a heterobifunctional cross-linker), provide them as a
# comma-separated list enclosed in quotation marks. For example: "nK 156.0786,
# nK 155.0946".
# Available for kojak
mono_link=nK 156.0786

# Specifies a mass adjustment to be applied to all indicated amino acids prior
# to spectral analysis. Amino acids are identified by their single letter
# designation. N-terminal and C-terminal fixed modifications are designated by n
# and c, respectively. The relative mass difference, positive or negative, is
# listed after the amino acid, separated by a space. If multiple fixed
# modification masses are desired, provide them as a comma-separated list
# enclosed in quotation marks. For example: "C 57.02146, nK 42.01057".
# Available for kojak
fixed_modification=C 57.02146

# Specifies a mass adjustment to be applied to all protein C-termini prior to
# spectral analysis. The relative mass difference may be any non-zero number.
# Available for kojak
fixed_modification_protC=0

# Specifies a mass adjustment to be applied to all protein N-termini prior to
# spectral analysis. The relative mass difference may be any non-zero number.
# Available for kojak
fixed_modification_protN=0

# Specifies a dynamic mass adjustment to be applied to protein C-terminal amino
# acids during spectral analysis. Peptides containing the protein C-terminus are
# tested with and without the dynamic modification mass. The relative mass
# difference can be any non-zero value. If multiple dynamic protein C-terminal
# modification masses are desired, provide them as a comma-separated list
# enclosed in quotation marks. For example, "56.037448, -58.005479".
# Available for kojak
modification_protC=0

# Specifies a dynamic mass adjustment to be applied to protein N-terminal amino
# acids during spectral analysis. Peptides containing the protein N-terminus are
# tested with and without the dynamic modification mass. The N-terminus includes
# both the leading and 2nd amino acid, in case of removal of the leading amino
# acid. The relative mass difference can be any non-zero value. If multiple
# dynamic protein N-terminal modification masses are desired, provide them as a
# comma-separated list enclosed in quotation marks. For example, "42.01055,
# 0.984016".
# Available for kojak
modification_protN=0

# Searching for differential modifications increases search times exponentially.
# This increase in computation can be exacerbated when searching for
# differential modifications on cross-linked peptides. Such computation can be
# avoided if is known that the cross-linked peptides should not have
# differential modifications. In these cases, this setting can be turned off.
# Available for kojak
diff_mods_on_xl=false

# Indicates the maximum number of differential mass modifications allowed for a
# peptide sequence.
# Available for kojak
max_mods_per_peptide=2

# When multiple sites of linkage are available on a peptide, it is possible for
# that peptide to be linked to a second peptide at one site and contain a
# mono-link at another site. If such instances are considered rare due to the
# experimental conditions, then this parameter can be disabled to improve
# computation time.
# Available for kojak
mono_links_on_xl=false

# An enzyme string code is used to define amino acid cut sites when parsing
# protein sequences. Following the code, a separate label can be used to name
# the enzyme used. The rules for peptide parsing are similar to other database
# search engines such as X!Tandem: 1) cleavage amino acids are specified in
# square braces: [], 2) a vertical line, |, indicates N- or C-terminal to the
# residue, 3) exception amino acids are specified in curly braces: {}.
# Available for kojak
kojak_enzyme=[KR] Trypsin

# Determines the accuracy of the scoring algorithm with smaller bins being more
# strict in determining matches between theoretical and observed spectral peaks.
# Low-resolution spectra require larger bin sizes to accommodate errors in mass
# accuracy of the observed peaks. Smaller bins also require more system memory,
# so caution must be exercised when setting this value for high-resolution
# spectra. For ion trap (low-res) MS/MS spectra, the recommended values is
# 1.0005. For high-res MS/MS, the recommended value is 0.03.
# Available for kojak
fragment_bin_size=0.03

# Should A-series fragment ions be considered?
# Available for kojak
ion_series_A=false

# Should B-series fragment ions be considered?
# Available for kojak
ion_series_B=true

# Should C-series fragment ions be considered?
# Available for kojak
ion_series_C=false

# Should X-series fragment ions be considered?
# Available for kojak
ion_series_X=false

# Should Y-series fragment ions be considered?
# Available for kojak
ion_series_Y=true

# Should Z-series fragment ions be considered
# Available for kojak
ion_series_Z=false

# This parameter requires two values. The first value is a short, case-sensitive
# string of characters that appears in the name of every decoy protein sequence
# in the database. The second value is either 0 or 1, where 0 indicates that
# these decoy sequences are already provided in the FASTA database supplied by
# the user, and 1 indicates Kojak should automatically generate the decoy
# sequences and preface the protein names with the characters supplied in the
# first value. If Kojak is requested to generate decoy sequences, it will save
# the full complement of target and decoy sequences as a fasta file in the
# output directory at the end of analysis. Kojak generates decoy sequences by
# reversing the amino acids between enzymatic cleavage sites in the protein
# sequence. The sites of enzymatic cleavage are determined by the rules supplied
# with the <code>kojak_enzyme</code> parameter. The leading methionine in the
# sequences, however, remains fixed. This approach ensures that, with very few
# exceptions, the number, length, and mass of the decoy peptides are identical
# to the target peptides. 
# Available for kojak
decoy_filter=DECOY_ 1

# Allows the searching of neighboring isotope peak masses for poorly resolve
# precursors. Up to three alternative isotope peak masses will be searched in
# addition to the presumed precursor peak mass to correct for errors in
# monoisotopic precursor peak identification.
# Available for kojak
kojak_isotope_error=1

# Number of missed enzyme cleavages allowed. If your digestion enzyme cuts at
# the same amino acids involved in cross-linking, then this number must be
# greater than 0 to identify linked peptides. In such cases, a minimum value of
# 2 is required to identify loop-links.
# Available for kojak
max_miscleavages=0

# Maximum peptide mass allowed when parsing the protein sequence database.
# Peptides exceeding this mass will be ignored in the analysis.
# Available for kojak
max_peptide_mass=8000

# Minimum peptide mass allowed when parsing the protein sequence database.
# Peptides with a lower mass will be ignored in the analysis.
# Available for kojak
min_peptide_mass=500

# Minimum number of MS/MS peaks required to proceed with analysis of a spectrum.
# If spectrum_processing is enabled, the peak count occurs after the spectrum is
# processed
# Available for kojak
min_spectrum_peaks=12

# Maximum number of MS/MS peaks to analyze if using the
# <code>spectrum_processing</code> parameter. Peaks are kept in order of
# intensity, starting with the most intense. Setting a value of 0 keeps all
# peaks.
# Available for kojak
max_spectrum_peaks=0

# Tolerance used when determining which peptides to search for a given MS/MS
# spectrum based on its precursor ion mass. The unit is parts-per-million (PPM).
# Available for kojak
ppm_tolerance_pre=10

# Some data files may filter out precursor scans to save space prior to
# searching. To analyze these files, the precursor analysis algorithms in Kojak
# must be disabled. It is also possible, though not always recommended, to
# disable these algorithms even when precursor scans are included in the data
# files. This parameter toggles the precursor analysis algorithms.
# Available for kojak
precursor_refinement=true

# For some data (such as Thermo Orbitrap data), the MS/MS spectra may have a
# precursor mass prediction already. With this parameter, the Kojak algorithm
# can be set to either ignore, use, or supplement the predicted precursor
# information. There are three options for the parameter: 0 = Ignore all
# precursor mass predictions and have Kojak make new predictions using its
# precursor processing algorithms. 1 = Use the existing precursor mass
# predictions and skip further processing with Kojak. 2 = Use the existing
# precursor mass predictions and supplement these values with additional results
# of the Kojak precursor processing algorithms. The recommended value is 2.
# Supplementing the precursor values performs the following functions. First,
# the monoisotopic precursor mass may be refined to one determined from a point
# near the apex of the extracted ion chromatogram, with potentially better mass
# accuracy. Second, in cases where the monoisotopic peak mass might not have
# been predicted correctly in the original analysis, a second monoisotopic mass
# is appended to the spectrum, allowing database searching to proceed checking
# both possibilities. Third, in cases where there is obvious chimeric signal
# overlap, a spectrum will be supplemented with the potential monoisotopic peak
# masses of all presumed precursor ions. Regardless of this parameter setting,
# MS/MS spectra that do not have an existing precursor mass prediction will be
# analyzed to identify the monoisotopic precursor mass using functions built
# into Kojak.
# Available for kojak
prefer_precursor_pred=2

# The MS/MS spectrum processing function will collapse isotope distributions to
# the monoisotopic peak and reduce the number of peaks to analyze to the number
# specified with the <code>max_spectrum_peaks</code> parameter.
# Available for kojak
spectrum_processing=false

# This parameter specifies the number of top scoring peptides to store in the
# first pass of the Kojak analysis. A second pass follows, pairingcross-linked
# peptides to these top sequences to produce the final cross-linked peptide
# score. Setting this number too low will cause cross-linked sequences to be
# missed. Setting this number too high will degrade the performance of the
# algorithm. Optimal settings will depend on database size and the number of
# modifications in the search. Recommended values are between 5 and 50 (20 is
# probably a good start).
# Available for kojak
top_count=20

# Exports only the specified number of characters for each protein name in the
# Kojak output. Otherwise, if set to 0, all characters in the protein name are
# exported.
# Available for kojak
truncate_prot_names=0

# Specifies the minimum number of tests to be present in the histogram for
# e-value calculations. A larger number better resolves the histogram and
# improves the e-value estimation for the peptide sequences in each spectrum.
# However, larger numbers also increase computation time. The recommended values
# are between 2000 and 10000
# Available for kojak
e_value_depth=5000

# The minimum peptide score threshold for the first (alpha) peptide during
# crosslink analysis. During the first pass in the analysis, if the top scoring
# alpha peptides do not exceed this threshold, they will not be considered for
# pairing with a second (beta) peptide during the second pass of the analysis. 
# Available for kojak
min_peptide_score=0.1

#
# COMET_ENZYME_INFO _must_ be at the end of this parameters file
#
[COMET_ENZYME_INFO]
0.  No_enzyme				0       -           -
1.  Trypsin				1      KR           P
2.  Trypsin/P				1      KR           -
3.  Lys_C				1      K            P
4.  Lys_N				0      K            -
5.  Arg_C				1      R            P
6.  Asp_N				0      D            -
7.  CNBr				1      M            -
8.  Glu_C				1      DE           P
9.  PepsinA				1      FL           P
10. Chymotrypsin			1      FWYL         P
11. No_cut			1      @         @
